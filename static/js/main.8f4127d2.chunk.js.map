{"version":3,"sources":["utils/RecordsAPI.js","components/Record.js","components/RecordForm.js","components/AmountBox.js","components/Records.js","serviceWorker.js","index.js"],"names":["api","process","REACT_APP_RECORDS_API_URL","Records","state","edit","this","props","record","date","title","amount","className","onClick","handleToggle","bind","handleDelete","event","id","preventDefault","axios","delete","then","response","handleDeleteRecord","catch","error","message","setState","body","refs","value","Number","parseFloat","toFixed","put","handleEditRecord","data","type","defaultValue","ref","handleEdit","recordForm","recordRow","React","Component","RecordForm","name","obj","target","post","handleNewRecord","console","log","onSubmit","handleSubmit","onChange","handleChange","placeholder","disabled","valid","AmountBox","text","isLoaded","records","get","recordIndex","indexOf","newRecords","map","item","index","filter","credits","reduce","prev","curr","debit","recordsComponent","key","updateRecord","deleteRecord","balance","addRecord","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f4127d2.chunk.js","sourcesContent":["import axios from 'axios'\nconst api = process.env.REACT_APP_RECORDS_API_URL || \"https://5db85da7177b350014ac796d.mockapi.io\"\n\nexport const getALl = () => \n    axios.get(`${api}/api/v1/records`)\n\nexport const create = (body) =>\n    axios.post(`${api}/api/v1/records`, body)\n\nexport const update = (id, body) => \n    axios.put(`${api}/api/v1/records/${id}`, body)\n\nexport const remove = (id) =>\n    axios.delete(`${api}/api/v1/records/${id}`)","import React from 'react';\nimport PropTypes from 'prop-types'\nimport * as RecordsAPI from '../utils/RecordsAPI'\n\nexport default class Records extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            edit: false\n        }\n    }\n\n    recordRow() {\n        return (\n            <tr>\n                <td>{this.props.record.date}</td>\n                <td>{this.props.record.title}</td>\n                <td>{this.props.record.amount}</td>\n                <td>\n                    <button className=\"btn btn-info mr-2\" onClick={this.handleToggle.bind(this)}>Edit</button>\n                    <button className=\"btn btn-danger \" onClick={this.handleDelete.bind(this)}>Delete</button>\n                </td>\n            </tr>\n        );\n    }\n    handleDelete(event) {\n        event.preventDefault()\n        RecordsAPI.remove(this.props.record.id).then(\n            response => {\n                this.props.handleDeleteRecord(this.props.record)\n            }\n        ).catch(\n            error => error.message\n        )\n    }\n\n    handleToggle() {\n        this.setState({\n            edit: !this.state.edit\n        })\n    }\n\n    //Edit data\n    handleEdit(event) {\n        event.preventDefault()\n        const record = {\n            date: this.refs.date.value,\n            title: this.refs.title.value,\n            // amount : Number.parseInt(this.refs.amount.value, 0)\n            amount: Number.parseFloat(this.refs.amount.value, 0).toFixed(2)\n        }\n\n        RecordsAPI.update(this.props.record.id, record).then(\n            response => {\n                this.setState({ edit: false })\n                this.props.handleEditRecord(this.props.record, response.data)\n            }\n        ).catch(\n            error => error.message\n        )\n    }\n\n    recordForm() {\n        return (\n            <tr>\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.date} ref=\"date\"></input></td>\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.title} ref=\"title\" ></input></td>\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.amount} ref=\"amount\"></input></td>\n                <td>\n                    <button className=\"btn btn-info mr-1\" onClick={this.handleEdit.bind(this)}>Update</button>\n                    <button className=\"btn btn-danger \" onClick={this.handleToggle.bind(this)}>Cancel</button>\n                </td>\n            </tr>\n        );\n    }\n\n    render() {\n        if (this.state.edit) {\n            return this.recordForm()\n        } else {\n            return this.recordRow()\n        }\n    }\n}\n\n//数据类型检查\nRecords.propTypes = {\n    id: PropTypes.string,\n    date: PropTypes.string,\n    title: PropTypes.string,\n    amount: PropTypes.number\n}","import React from 'react';\nimport * as RecordsAPI from '../utils/RecordsAPI'\n\nexport default class RecordForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: \"\",\n            title: \"\",\n            amount: \"\"\n        }\n    }\n\n    handleChange(event) {\n        let name, obj;\n        name = event.target.name;\n        this.setState((\n            obj = {},\n            obj[\"\" + name] = event.target.value,\n            obj\n        ))\n    }\n\n    valid() {\n        return this.state.date && this.state.title && this.state.amount\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const data = {\n            date: this.state.date,\n            title: this.state.title,\n            // amount: Number.parseInt(this.state.amount, 0)\n            amount: Number.parseFloat(this.state.amount, 0).toFixed(2)\n        }\n\n        RecordsAPI.create(data).then(\n            response => {\n                this.props.handleNewRecord(response.data);\n                this.setState(\n                    {\n                        date: \"\",\n                        title: \"\",\n                        amount: \"\"\n                    }\n                )\n\n            }\n        ).catch(\n            error => console.log(error.message)\n        )\n    }\n\n    render() {\n        return (\n            <form className='form-inline mb-3' onSubmit={this.handleSubmit.bind(this)}>\n                <div className=\"form-group mr-2\">\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"Date\" name=\"date\" value={this.state.date}></input>\n                </div>\n                <div className=\"form-group mr-2\">\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"Title\" name=\"title\" value={this.state.title} ></input>\n                </div>\n                <div className=\"form-group mr-2\">\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"Amount\" name=\"amount\" value={this.state.amount}></input>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>Create Record</button>\n            </form>\n        );\n    }\n}\n\n","import React from 'react'\n\nconst AmountBox = ({ text, type, amount }) => {\n    return (\n        <div className=\"col text-center\">\n            <div className=\"card\">\n                <div className={`card-header bg-${type} text-white`}>\n                    {text}\n                </div>\n                <div className=\"card-body\">\n                    {amount}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AmountBox","import React from 'react';\nimport Record from './Record'\n//import { getJSON } from 'jquery'  //按需导入，只需要getJSON\n// import axios from 'axios'\nimport * as RecordsAPI from '../utils/RecordsAPI'\nimport RecordForm from './RecordForm'\nimport AmountBox from './AmountBox'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nclass Records extends React.Component {\n  constructor () {\n    super();\n    this.state = {\n      error: null,\n      isLoaded: false,\n      records: []\n    }\n  }\n\n  // componentDidMount() {\n  //   getJSON(\"https://5db85da7177b350014ac796d.mockapi.io/api/v1/records\").then(\n  //     response => this.setState({\n  //       records: response,\n  //       isLoaded: true\n  //     }),\n  //     error => this.setState({\n  //       isLoaded: true,\n  //       error: error\n  //     })\n  //   )\n  // }\n\n  //axios请求API\n  componentDidMount () {\n    RecordsAPI.getALl().then(\n      response => this.setState({\n        records: response.data,\n        isLoaded: true\n      })\n    ).catch(\n      error => this.setState({\n        isLoaded: true,\n        error: error\n      })\n    )\n  }\n  //add new Record\n  addRecord (record) {\n    this.setState({\n      error: null,\n      isLoaded: true,\n      records: [\n        ...this.state.records,\n        record\n      ]\n    })\n  }\n\n  //update Record\n  updateRecord (record, data) {\n    const recordIndex = this.state.records.indexOf(record)\n    const newRecords = this.state.records.map((item, index) => {\n      if (index !== recordIndex) {\n        return item\n      }\n      return {\n        ...item,\n        ...data\n      }\n    })\n    this.setState({\n      records: newRecords\n    })\n  }\n  //delete Record\n  deleteRecord (record) {\n    const recordIndex = this.state.records.indexOf(record)\n    const newRecords = this.state.records.filter((item, index) => index !== recordIndex)\n    this.setState({\n      records: newRecords\n    })\n  }\n\n  credits () {\n    let credits = this.state.records.filter((record) => {\n      return record.amount >= 0\n    })\n    return credits.reduce((prev, curr) => {\n      // return prev + Number.parseInt(curr.amount, 0)\n      return ((prev * 100 + Number.parseFloat(curr.amount, 0) * 100) / 100).toFixed(2)\n    }, 0)\n  }\n\n  debit () {\n    let credits = this.state.records.filter((record) => {\n      return record.amount < 0\n    })\n    return credits.reduce((prev, curr) => {\n      // return prev + Number.parseInt(curr.amount, 0)\n\n      return ((prev * 100 + Number.parseFloat(curr.amount, 0) * 100) / 100).toFixed(2)\n    }, 0)\n  }\n\n  balance () {\n    return ((this.credits() * 100 + this.debit() * 100) / 100).toFixed(2)\n\n  }\n\n\n  render () {\n    const { error, isLoaded, records } = this.state;\n    let recordsComponent;\n\n    if (error) {\n      recordsComponent = <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      recordsComponent = <div>Loading...</div>;\n    } else {\n      recordsComponent = (\n        <table className=\"table table-bordered\" >\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Title</th>\n              <th>Amount</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {records.map((record) => (<Record\n              key={record.id}\n              record={record}\n              handleEditRecord={this.updateRecord.bind(this)}\n              handleDeleteRecord={this.deleteRecord.bind(this)}\n            />)\n            )}\n          </tbody>\n        </table>\n      );\n    }\n    return (\n      <div>\n        <h2>Records</h2>\n        <div className=\"row mb-3\">\n          <AmountBox text=\"Credits\" type=\"success\" amount={this.credits()} />\n          <AmountBox text=\"Debit\" type=\"danger\" amount={this.debit()} />\n          <AmountBox text=\"Balance\" type=\"info\" amount={this.balance()} />\n        </div>\n        <RecordForm handleNewRecord={this.addRecord.bind(this)} />\n        {recordsComponent}\n      </div>\n    )\n  }\n}\n\nexport default Records;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Records from './components/Records';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Records />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}